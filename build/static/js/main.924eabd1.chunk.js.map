{"version":3,"sources":["api/youtube.js","components/SearchBar.js","components/VideoDetail.js","components/VideoItem.js","components/VideoList.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","SearchBar","state","searchTerm","handleChange","event","setState","target","value","handleSubmit","preventDefault","onFormSubmit","props","Paper","elevation","style","padding","onSubmit","this","TextField","fullWidth","label","onChange","React","Component","VideoDetail","video","videoSrc","id","videoId","console","log","Fragment","height","width","src","allowFullScreen","Typography","variant","marginTop","snippet","title","channelTitle","description","VideoItem","onVideoSelect","Grid","item","xs","display","align","cursor","onClick","marginRight","alt","thumbnails","medium","url","VideoList","videos","listOfVideos","map","key","container","spacing","App","selectedVideos","a","youtube","get","params","part","maxResults","q","response","data","items","justify","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.924eabd1.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default axios.create({\n\tbaseURL: 'https://www.googleapis.com/youtube/v3'\n})","import React from 'react';\nimport { Paper, TextField } from '@material-ui/core';\n\nclass SearchBar extends React.Component {\n\tstate = {\n\t\tsearchTerm: ''\n\t}\n\n\thandleChange = (event) => {\n\t\tthis.setState({\n\t\t\tsearchTerm: event.target.value\n\t\t})\n\t}\n\n\thandleSubmit = (event) => {\n\t\tevent.preventDefault();\n\t\tconst { searchTerm } = this.state;\n\t\tconst { onFormSubmit } = this.props;\n\n\t\tonFormSubmit(searchTerm);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Paper elevation={6} style={{padding: '25px'}}>\n\t\t\t\t<form onSubmit={this.handleSubmit}>\n\t\t\t\t\t<TextField fullWidth label=\"Search...\" onChange={this.handleChange}/>\n\t\t\t\t</form>\n\t\t\t</Paper>\n\t\t)\n\t}\n}\n\nexport default SearchBar","import React from 'react'\nimport { Paper, Typography } from '@material-ui/core'\n\nconst VideoDetail = ({ video }) => {\n\n\t\n\tif(!video) return <div>Loading...</div>\n\tconst videoSrc = `https://www.youtube.com/embed/${video.id.videoId}`;\n\tconsole.log('video src', videoSrc)\n\treturn (\n\t\t\n\t\t\t<React.Fragment>\n\t\t\t<Paper elevation={6} style={{height: '100%'}}> \n\t\t\t\t<iframe width=\"100%\" height=\"100%\" src={videoSrc} allowFullScreen>\n\t\t\t\t</iframe>\n\t\t\t</Paper>\n\n\t\t\t<Paper elevation={6} style={{padding: '15px'}} >\n\t\t\t\t<Typography variant=\"h4\" style={{marginTop: '20px'}}>{video.snippet.title} - {video.snippet.channelTitle}</Typography>\n\t\t\t\t<Typography variant=\"subtitle1\">{video.snippet.channelTitle}</Typography>\n\t\t\t\t<Typography variant=\"subtitle2\">{video.snippet.description}</Typography>\n\t\t\t\t\n\t\t\t</Paper>\n\n\t\t\t</React.Fragment>\n\t\t\n\t)\n}\n\nexport default VideoDetail","import { Grid, Paper, Typography } from '@material-ui/core'\nimport React from 'react'\n\nconst VideoItem = ({ video, onVideoSelect }) => {\n\tconsole.log(video)\n\treturn (\n\t\t<Grid item xs={12}>\n\t\t\t<Paper style={{ display: 'flex', align: 'center', cursor: 'pointer'}} onClick={() => onVideoSelect(video)}>\n\t\t\t\t<img style={{marginRight: '20px'}} alt=\"thumbnail\" src={video.snippet.thumbnails.medium.url}/>\n\t\t\t\t<Typography variant=\"subtitle1\"><b>{video.snippet.title}</b></Typography>\n\t\t\t\t<Typography variant=\"subtitle1\"><b></b></Typography>\n\t\t\t</Paper>\n\t\t</Grid>\n\t)\n}\n\nexport default VideoItem;","import React from 'react'\nimport { Grid } from '@material-ui/core'\nimport VideoItem from './VideoItem';\n\nconst VideoList = ({ videos, onVideoSelect }) => {\n\tconst listOfVideos = videos.map((video, id) => <VideoItem onVideoSelect={onVideoSelect} key={id} video={video}/>)\n\treturn (\n\t\t<Grid container spacing={10}>\n\t\t\t{listOfVideos}\n\t\t</Grid>\n\t)\n}\n\nexport default VideoList;","import React from 'react';\nimport { Grid } from '@material-ui/core';\nimport youtube from './api/youtube';\n\nimport  { SearchBar, VideoDetail, VideoList } from './components/'\n\n\n\nclass App extends React.Component {\n\tstate = {\n\t\tvideos: [],\n\t\tselectedVideos: null\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.handleSubmit('dravid')\n\t}\n\n\thandleSubmit = async (searchTerm) => {\n\t\tconst response = await youtube.get('search', {params: {\n\t\t\t\tpart: 'snippet',\n\t\t\t\tmaxResults: '5',\n\t\t\t\tkey: 'AIzaSyBU0kvk3jtyf2r5NwdkuMga1WkP495hDUc',\n\t\t\t\tq: searchTerm\n\t\t\t}}\n\t\t)\n\t\tthis.setState({\n\t\t\tvideos: response.data.items,\n\t\t\tselectedVideos: response.data.items[0]\n\t\t})\t\n\t}\n\n\tonVideoSelect = (video) => {\n\t\tthis.setState({\n\t\t\tselectedVideos: video\n\t\t})\n\t}\n\n\n  \trender() {\n\n  \t\tconst { videos, selectedVideos } = this.state;\n\t    return (\n\t\t    <Grid justify=\"center\" container spacing={10}>\n\t\t    \t<Grid item xs={11}>\n\t\t    \t\t<Grid container spacing={10}>\n\t\t    \t\t\t<Grid item xs={12}>\n\t\t    \t\t\t\t<SearchBar onFormSubmit={this.handleSubmit}/>\n\t\t    \t\t\t</Grid>\n\t\t    \t\t\t<Grid item xs={8}>\n\t\t    \t\t\t\t<VideoDetail video={selectedVideos}/>\n\t\t    \t\t\t</Grid>\n\t\t    \t\t\t<Grid item xs={4}>\n\t\t    \t\t\t\t<VideoList videos={videos} onVideoSelect={this.onVideoSelect}/>\n\t\t    \t\t\t</Grid>\n\t\t    \t\t</Grid>\n\t\t    \t</Grid>\n\t\t    </Grid>\n\t    )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}